type PresignedUrl {
    uploadUrl: String
    imageUrl: String
    status: String
}

type MerchantProduct {
      id: ID
      sku: String
      upc: String
      ref: String
      slug: String
      price: BigDecimal
      image: String
      name: String
      name_ar: String
      brand: String
      brand_ar: String
      description: String
      description_ar: String
      features: String
      features_ar: String
      cost: BigDecimal
      weight: BigDecimal
      slug: String
      type: String
      unit: String
      availability: Int
      salePrice: BigDecimal
      quantity: BigDecimal
      discountInPercent: Int
      shopIds: [Long]
      gallery: [String]
      browseNode: String
      browseNode_ar: String
}

type MerchantProductResponse {
  items: [MerchantProduct]
  total: Int!
  hasMore: Boolean!
}

input AddProductInput {
      id: Long
      sku: String
      upc: String
      price: BigDecimal
      image: String
      name: String
      name_ar: String
      brand: String
      brand_ar: String
      description: String
      description_ar: String
      features: String
      features_ar: String
      cost: BigDecimal
      weight: BigDecimal
      shopIds: [Long]
      browseNode: String
      browseNode_ar: String
      slug: String
      type: String
      unit: String
      availability: Int
      salePrice: BigDecimal
      quantity: BigDecimal
      ref: String
      discountInPercent: Int
}

extend type Query {
    merchantProducts(
            text: String = ""
            type: String = ""
            offset: Int = 0
            limit: Int = 10
            lang: Int = 1
            imported: Boolean = true
    ): MerchantProductResponse

}

extend type Mutation {
    createMerchantProduct(product: AddProductInput) : Message
    approveProduct(id: ID): Product
    getImageUploadUrl(filename: String, contentType: String): PresignedUrl
    importProducts(products: [AddProductInput], shopIds: [Long], browseNode: String): Message
}
