type Payment {
    id: ID
    paymentMethod: String
    orderId: Long
    amount: BigDecimal
    authCode: String
    transactionId: String
    cardNumber: String
    createdDate: String
    orderReference: String
    account: String
    bankAccountNumber: String
    bankName: String
    bankOwnerName: String
    settlementDate: Date
    processedDate: Date
    customer: String
    cartId: String
    voided: Boolean
}

input PaymentInput {
    id: ID
    paymentMethod: String
    orderId: Long
    amount: BigDecimal
    authCode: String
}

type PaymentResponse {
  items: [Payment!]!
  total: Int!
  hasMore: Boolean!
}

extend type Mutation {
    setSettlementDate(paymentIds: [Long], date: Date): Message
    setProcessedDate(paymentIds: [Long], date: Date): Message
    setAccountingCode(paymentIds: [Long], code: String): Message
    processCheckoutRefund(token: String, amount: String, ref: String, description: String): Message
}

extend type Query {
    transactions(paymentMethods: [String], offset: Int, limit: Int, maxAmount: String, from: Date, to: Date, customerId: Long, accountCode: String, unsettledOnly: Boolean): PaymentResponse
    transaction(id: ID): Payment
}