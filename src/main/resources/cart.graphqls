enum CartState {
    UNCLAIMED
    CLAIMED
    CLOSED
}

type Cart {
    id: ID!,
    secureKey: String,
    gift: Boolean,
    giftMessage: String,
    #customer: Customer,
    cartItems: [CartItem]
}

input CartInput {
    id: ID,
    secureKey: String,
    gift: Boolean,
    giftMessage: String
    cartState: CartState
    customerId: Int
}

type CartItem {
    id: ID,
    productId: Long,
    quantity: Int
    image: String
    url: String
    title: String
    price: String
    salePrice: String
    slug: String
    unit: String
}

input CartItemInput {
    productId: Long,
    quantity: Int
}


type CheckoutSession {
    redirectUrl: String,
    secureKey: String
}

type Reward {
    id: ID
    name: String
    description: String
    minimumCartAmount: Long
    discountValue: Long
    discountValidDays: Long
    points: Long
}

extend type Query {
    getCart(secureKey: String, items: [CartItemInput]): Cart
    rewards: [Reward]
}

extend type Mutation {
    updateCart(secureKey: String, items: [CartItemInput]): Cart
    setCart(secureKey: String, items: [CartItemInput]): Cart
    createCheckoutSession(secureKey: String, items: [CartItemInput]): CheckoutSession
}