enum OrderState {
    AWAITING_PAYMENT
    CONTACTED
    PAYMENT_AUTHORIZED
    PAYMENT_ACCEPTED
    IN_PROGRESS
    READY
    PARTIALLY_DELIVERED
    DELIVERED
    SHIPPED
    CANCELLED
}

type Currency {
    id: ID!,
    code: String
}

type OrderItem {
    sequence: Int
    productName: String
    quantity: Int
    price: BigDecimal
    comment: String
    image: String
    weight: BigDecimal
    unit: String
    lineTotal: BigDecimal
}

type Order {
    id: ID!,
    reference: String,
    orderState: OrderState,
    invoiceDate: LocalDate,
    deliveryDate: LocalDate,
    customer: Customer!,
    cart: Cart,
    currency: String,
    deliveryAddress: Address!,
    invoiceAddress: Address!
    orderItems: [OrderItem]
    total: BigDecimal
    deliveryTotal: BigDecimal
    discountsTotal: BigDecimal
    subtotal: BigDecimal
    carrier: String
    paymentMethod: String
    createdDate: Date
}
type Purchase {
    id: ID
    po: Int
}
type PurchaseItem {
    id: ID
    sequence: Int
    price: BigDecimal
    qunatity: BigDecimal
    description: String
}

input OrderItemInput {
    id: ID
}

input PurchaseItemInput {
    sequence: Int
    price: BigDecimal
    qunatity: BigDecimal
    description: String
    orderItems: [OrderItemInput]
}

extend type Mutation {
    createOrder(id: Int): Order
    contact(id: Int): Message
    #createOrderFromCart(cart: CartInput): Order
    createPurchase(items: [PurchaseItemInput]): Purchase
}

extend type Query {

    #getOrders(): [Orders]
    orderConfirmation(ref: String, key: String): Order
    orders(limit: Int = 10): [Order]
    ordersA(state: [OrderState], limit: Int, searchText: String): [Order]
}



