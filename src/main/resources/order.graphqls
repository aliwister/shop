enum OrderState {
    AWAITING_PAYMENT
    DRAFT
    CONTACTED
    PAYMENT_AUTHORIZED
    PAYMENT_ACCEPTED
    IN_PROGRESS
    READY
    PARTIALLY_DELIVERED
    DELIVERED
    SHIPPED
    CANCELLED
}

type Currency {
    id: ID!,
    code: String
}

type OrderItem {
    sequence: Int
    productName: String
    quantity: Int
    price: BigDecimal
    comment: String
    image: String
    weight: BigDecimal
    unit: String
    lineTotal: BigDecimal
    sku: String
}

type Order {
    id: ID!,
    reference: String,
    orderState: OrderState,
    invoiceDate: LocalDate,
    deliveryDate: LocalDate,
    customer: Customer!,
    cart: Cart,
    currency: String,
    deliveryAddress: Address!,
    invoiceAddress: Address!
    orderItems: [OrderItem]
    total: BigDecimal
    deliveryTotal: BigDecimal
    discountsTotal: BigDecimal
    subtotal: BigDecimal
    carrier: String
    paymentMethod: String
    createdDate: Date
}
type Purchase {
    id: ID
}
type PurchaseItem {
    id: ID
    sequence: Int
    price: BigDecimal
    qunatity: BigDecimal
    description: String
}

input OrderItemInput {
    id: ID
}

input PurchaseInput {
    id: ID
    currency: String
    subtotal: BigDecimal
    deliveryTotal: BigDecimal
    taxesTotal: BigDecimal
    discountTotal: BigDecimal
    total: BigDecimal
    deliveryAddressId: Long
    invoiceAddressId: Long
    merchantId: Long
    orderState: OrderState
}

input PurchaseItemInput {
    sequence: Int
    price: BigDecimal
    qunatity: BigDecimal
    description: String
    orderItemId: Long
}

type Payment {
    paymentMethod: String
    orderId: Long
    amount: BigDecimal
}

type PurchaseQueue {
    id: ID
    productName: String
    quantity: BigDecimal
    price: BigDecimal
    image: String
    weight: BigDecimal
    url: String
}

extend type Mutation {
    createOrder(id: Int): Order
    contact(id: Int): Message
    #createOrderFromCart(cart: CartInput): Order

    createPurchase(dto: PurchaseInput): Purchase
    updatePurchase(dto: PurchaseInput, items: [PurchaseItemInput]): Purchase


    sendPaymentSms(id: ID, mobile: String): Message
    discountOrder(id: ID): Order
    setOrderState(id: ID, state: OrderState): Order
    cancelOrder(id: ID): Order
    addPayment(id: ID, amount: BigDecimal, method: String, authCode: String): Payment
    sendOrderLevelEmail(id:ID, template:String): Message
    sendProductLevelEmail(orderId: ID, orderItems: [Long], template:String): Message
}

extend type Query {
    #getOrders(): [Orders]
    orderConfirmation(ref: String, key: String): Order
    orders(limit: Int = 10): [Order]
    ordersA(state: [OrderState], limit: Int, searchText: String): [Order]
    orderA(id: ID): Order

    purchases(state: [OrderState], limit: Int, searchText: String): [Purchase]
    purchase(id: ID): Purchase
    purchaseQueue: [PurchaseQueue]
}