enum OrderState {
    AWAITING_PAYMENT
    DRAFT
    CONTACTED
    PAYMENT_AUTHORIZED
    PAYMENT_ACCEPTED
    IN_PROGRESS
    READY
    PARTIALLY_DELIVERED
    DELIVERED
    SHIPPED
    CANCELLED
    CLOSED
}

type Currency {
    id: ID!,
    code: String
}

type OrderItem {
    id: ID
    orderId: Long
    sequence: Int
    productName: String
    quantity: BigDecimal
    price: BigDecimal
    comment: String
    image: String
    weight: BigDecimal
    unit: String
    lineTotal: BigDecimal
    productUrl: String
    productSku: String
    productId: Long
    productMerchantId: Long
    po: Long
}

type Order {
    id: ID!,
    reference: String,
    orderState: OrderState,
    invoiceDate: LocalDate,
    deliveryDate: LocalDate,
    customer: Customer!,
    cartId: Long,
    currency: String,
    deliveryAddress: Address!,
    invoiceAddress: Address!
    orderItems: [OrderItem]
    total: BigDecimal
    deliveryTotal: BigDecimal
    discountsTotal: BigDecimal
    couponName: String
    subtotal: BigDecimal
    carrier: String
    paymentMethod: String
    createdDate: Date
    payments: [Payment]
    balance: BigDecimal
}
type Merchant {
    id: ID
    name: String
}
type Purchase {
    id: ID
    ref: String
    purchaseItems : [PurchaseItem]
    currency: String
    invoiceDate: LocalDate
    subtotal: BigDecimal
    deliveryTotal: BigDecimal
    taxesTotal: BigDecimal
    discountTotal: BigDecimal
    total: BigDecimal
    merchantObj: Merchant
    createdBy: String
    createdDate: String
    lastModifiedBy: String
    lastModifiedDate: String
}
type PurchaseItem {
    id: ID
    sequence: Int
    price: BigDecimal
    quantity: BigDecimal
    description: String
    orderItems: [OrderItem]
    productId: Long
}

input OrderItemInput {
    id: ID
    orderId: Long
    sequence: Int
    quantity: Int
    price: BigDecimal
}

input PurchaseInput {
    id: ID
    currency: String
    subtotal: Float
    deliveryTotal: Float
    taxesTotal: Float
    discountTotal: Float
    total: Float
    deliveryAddressId: Int
    invoiceAddressId: Int
    merchantId: Int
    orderState: OrderState
    ref: String
}

input PurchaseItemInput {
    id: Long
    sequence: Int
    price: Float
    quantity: Float
    description: String
    orderItems: [OrderItemInput]
    productId: Long
}



type PurchaseQueue {
    id: ID
    productName: String
    quantity: BigDecimal
    price: BigDecimal
    cost: BigDecimal
    image: String
    weight: BigDecimal
    url: String
    sku: String
    productId: Long
    orderId: Long
    attributes: String
    merchantId: Long
}

type LineItem {
    productId: Int
    sku: String
    image: String
    name: String
    quantity: Float
    price: Float
    cost: Float
    subTotal: Float
    url: String
}
type CheckoutCart {
    id: ID!
    ref: String
    name: String
    phone: String
    email: String
    secureKey: String
    carrier: String
    currency: String
    items: [LineItem]
    #tenantId: Long
}
input LineItemInput {
    productId: Long
    sku: String
    image: String
    name: String
    quantity: Float
    price: Float
    cost: Float
    subTotal: Float
    url: String
    ref: String
}

input AddressPojo {
    id: ID
    line1: String
    line2: String
    firstName: String
    lastName: String
    mobile: String
    city: String
    alias: String
    country: String
}

input CheckoutCartInput {
    id: ID
    ref: String
    name: String
    phone: String
    email: String
    secureKey: String
    addresses: [AddressPojo]
    carrier: String
    currency: String
    items: [LineItemInput]
    allowPickup: Boolean
    #tenantId: Long
}
type OrderResponse {
  items: [Order!]!
  total: Int!
  hasMore: Boolean!
}

type PurchaseResponse {
  items: [Purchase!]!
  total: Int!
  hasMore: Boolean!
}


extend type Mutation {
    createOrder(id: Int): Order
    contact(id: Int): Message
    #createOrderFromCart(cart: CartInput): Order

    createPurchase(dto: PurchaseInput): Purchase
    updatePurchase(dto: PurchaseInput, items: [PurchaseItemInput]): Purchase

    sendPaymentSms(id: ID, mobile: String): Message
    discountOrder(id: ID): Order
    setOrderState(id: ID, state: OrderState): Order
    setPurchaseState(id: ID, state: OrderState): Purchase
    cancelOrder(id: ID, reason: String): Order
    closeOrder(id: ID, reason: String): Order
    cancelPurchase(id: ID, reason: String): Purchase
    closePurchase(id: ID, reason: String): Purchase
    addPayment(id: ID, amount: BigDecimal, method: String, authCode: String): Payment
    sendOrderLevelEmail(id:ID, template:String): Message
    sendProductLevelEmail(orderId: ID, orderItems: [Long], template:String): Message

    createCart(cart: CheckoutCartInput): CheckoutCart
    editOrder(id: ID, orderItems: [OrderItemInput], reason: String): Order
    #cancelOrder(id: ID): Order
    refundPayment(id: ID, amount: BigDecimal, authCode: String, bankName: String, bankAccountNumber: String, bankOwnerName: String, ref: Long, paymentMethod: String): Payment

    addDiscount(id: ID, amount: BigDecimal, couponName: String): Message


}

extend type Query {
    #getOrders(): [Orders]
    orderConfirmation(ref: String, key: String): Order
    orders(limit: Int = 10): [Order]
    ordersA(state: [OrderState], offset: Int, limit: Int, searchText: String, balance: Boolean): OrderResponse
    orderA(id: ID): Order
    auditActivity(id: ID, type: String) : [Action]

    purchases(state: [OrderState], offset: Int, limit: Int, searchText: String): PurchaseResponse
    unshippedPurchases: [PurchaseQueue]

    purchase(id: ID): Purchase
    purchaseQueue: [PurchaseQueue]
    merchants: [Merchant]
    payments(orderId: ID) : [Payment]
}